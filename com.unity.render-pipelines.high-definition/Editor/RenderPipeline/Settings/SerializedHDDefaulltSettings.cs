using UnityEditor.Rendering;using UnityEngine.Rendering.HighDefinition;namespace UnityEditor.Rendering.HighDefinition{    class SerializedHDDefaultSettings    {        public SerializedObject serializedObject;        public SerializedProperty renderPipelineResources;        public SerializedProperty renderPipelineRayTracingResources;        public SerializedFrameSettings defaultFrameSettings;        public SerializedFrameSettings defaultBakedOrCustomReflectionFrameSettings;        public SerializedFrameSettings defaultRealtimeReflectionFrameSettings;        //RenderPipelineResources not always exist and thus cannot be serialized normally.        public bool editorResourceHasMultipleDifferentValues        {            get            {                var initialValue = firstEditorResources;                for (int index = 1; index < serializedObject.targetObjects.Length; ++index)                {                    if (initialValue != (serializedObject.targetObjects[index] as HDDefaultSettings)?.renderPipelineEditorResources)                        return true;                }                return false;            }        }        public HDRenderPipelineEditorResources firstEditorResources            => (serializedObject.targetObjects[0] as HDDefaultSettings)?.renderPipelineEditorResources;        public void SetEditorResource(HDRenderPipelineEditorResources value)        {            for (int index = 0; index < serializedObject.targetObjects.Length; ++index)                (serializedObject.targetObjects[index] as HDDefaultSettings).renderPipelineEditorResources = value;        }        public SerializedHDDefaultSettings(SerializedObject serializedObject)        {            this.serializedObject = serializedObject;            renderPipelineResources = serializedObject.FindProperty("m_RenderPipelineResources");             renderPipelineRayTracingResources = serializedObject.FindProperty("m_RenderPipelineRayTracingResources");            defaultFrameSettings = new SerializedFrameSettings(serializedObject.FindProperty("m_RenderingPathDefaultCameraFrameSettings"), null); //no overrides in HDRPAsset            defaultBakedOrCustomReflectionFrameSettings = new SerializedFrameSettings(serializedObject.FindProperty("m_RenderingPathDefaultBakedOrCustomReflectionFrameSettings"), null); //no overrides in HDRPAsset            defaultRealtimeReflectionFrameSettings = new SerializedFrameSettings(serializedObject.FindProperty("m_RenderingPathDefaultRealtimeReflectionFrameSettings"), null); //no overrides in HDRPAsset        }        public void Update()        {            serializedObject.Update();        }        public void Apply()        {            serializedObject.ApplyModifiedProperties();        }    }}