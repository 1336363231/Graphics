#pragma only_renderers d3d11 playstation xboxone vulkan metal switch

#pragma multi_compile_local _ CLOUD_LAYER_DOUBLE_MODE

#pragma kernel BakeCloudTexture KERNEL_NAME=BakeCloudTexture

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/SkyUtils.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/CloudLayer/CloudLayer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

#ifndef CLOUD_LAYER_DOUBLE_MODE
    #define NUM_LAYERS  1
    #define LAYER       0
#else
    #define NUM_LAYERS  2
    #define LAYER       dispatchThreadId.z
#endif

TEXTURE2D(_CloudMapA);
SAMPLER(sampler_CloudMapA);

TEXTURE2D(_CloudMapB);
SAMPLER(sampler_CloudMapB);

RW_TEXTURE2D_ARRAY(float4, _CloudTextureOutput);

CBUFFER_START(cb0)
float4 _Params1;
float4 _Params2[NUM_LAYERS];
float4 _Params3[NUM_LAYERS];
CBUFFER_END

#define _SunDirection           _Params1.xyz
#define _Resolution             _Params1.w
#define _Opacities              _Params2[LAYER]
#define _CloudTint              _Params3[LAYER].xyz
#define _CloudRotation          _Params3[LAYER].w

[numthreads(8, 8, NUM_LAYERS)]
void KERNEL_NAME(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float2 uv = float2(dispatchThreadId.x * _Resolution, dispatchThreadId.y * _Resolution * 2.0f);
    uv.x = frac(uv.x + _CloudRotation);

    float4 cloudLayerColor = LAYER == 0 ?
        SAMPLE_TEXTURE2D_LOD(_CloudMapA, sampler_CloudMapA, uv, 0):
        SAMPLE_TEXTURE2D_LOD(_CloudMapB, sampler_CloudMapB, uv, 0);

	float4 clouds = cloudLayerColor * _Opacities;
    float opacity = max(max(clouds.r, clouds.g), max(clouds.b, clouds.a));

    _CloudTextureOutput[dispatchThreadId] = float4(opacity * _CloudTint, opacity);
}
